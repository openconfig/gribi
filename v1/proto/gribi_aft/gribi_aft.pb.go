// gribi_aft is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - github.com/openconfig/gribi/v1/yang/gribi-aft.yang
// Include paths:
//   - github.com/openconfig/gribi/v1/yang/...
//   - github.com/openconfig/gribi/v1/yang/deps/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: v1/proto/gribi_aft/gribi_aft.proto

package gribi_aft

import (
	enums "github.com/openconfig/gribi/v1/proto/gribi_aft/enums"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Afts          *Afts                  `protobuf:"bytes,35982132,opt,name=afts,proto3" json:"afts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetAfts() *Afts {
	if x != nil {
		return x.Afts
	}
	return nil
}

type Afts struct {
	state                 protoimpl.MessageState           `protogen:"open.v1"`
	Ipv4Entry             []*Afts_Ipv4EntryKey             `protobuf:"bytes,410397655,rep,name=ipv4_entry,json=ipv4Entry,proto3" json:"ipv4_entry,omitempty"`
	Ipv6Entry             []*Afts_Ipv6EntryKey             `protobuf:"bytes,403891971,rep,name=ipv6_entry,json=ipv6Entry,proto3" json:"ipv6_entry,omitempty"`
	LabelEntry            []*Afts_LabelEntryKey            `protobuf:"bytes,153428187,rep,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
	MacEntry              []*Afts_MacEntryKey              `protobuf:"bytes,162139969,rep,name=mac_entry,json=macEntry,proto3" json:"mac_entry,omitempty"`
	NextHop               []*Afts_NextHopKey               `protobuf:"bytes,132654769,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NextHopGroup          []*Afts_NextHopGroupKey          `protobuf:"bytes,362999033,rep,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	PolicyForwardingEntry []*Afts_PolicyForwardingEntryKey `protobuf:"bytes,269536139,rep,name=policy_forwarding_entry,json=policyForwardingEntry,proto3" json:"policy_forwarding_entry,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Afts) Reset() {
	*x = Afts{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts) ProtoMessage() {}

func (x *Afts) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts.ProtoReflect.Descriptor instead.
func (*Afts) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1}
}

func (x *Afts) GetIpv4Entry() []*Afts_Ipv4EntryKey {
	if x != nil {
		return x.Ipv4Entry
	}
	return nil
}

func (x *Afts) GetIpv6Entry() []*Afts_Ipv6EntryKey {
	if x != nil {
		return x.Ipv6Entry
	}
	return nil
}

func (x *Afts) GetLabelEntry() []*Afts_LabelEntryKey {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

func (x *Afts) GetMacEntry() []*Afts_MacEntryKey {
	if x != nil {
		return x.MacEntry
	}
	return nil
}

func (x *Afts) GetNextHop() []*Afts_NextHopKey {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *Afts) GetNextHopGroup() []*Afts_NextHopGroupKey {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts) GetPolicyForwardingEntry() []*Afts_PolicyForwardingEntryKey {
	if x != nil {
		return x.PolicyForwardingEntry
	}
	return nil
}

type Afts_Ipv4Entry struct {
	state                       protoimpl.MessageState                          `protogen:"open.v1"`
	DecapsulateHeader           enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,383809427,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EntryMetadata               *ywrapper.BytesValue                            `protobuf:"bytes,290934374,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                             `protobuf:"bytes,497198611,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                           `protobuf:"bytes,32856574,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Afts_Ipv4Entry) Reset() {
	*x = Afts_Ipv4Entry{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_Ipv4Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv4Entry) ProtoMessage() {}

func (x *Afts_Ipv4Entry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv4Entry.ProtoReflect.Descriptor instead.
func (*Afts_Ipv4Entry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Afts_Ipv4Entry) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_Ipv4Entry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_Ipv4Entry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_Ipv4Entry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_Ipv4EntryKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Ipv4Entry     *Afts_Ipv4Entry        `protobuf:"bytes,2,opt,name=ipv4_entry,json=ipv4Entry,proto3" json:"ipv4_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_Ipv4EntryKey) Reset() {
	*x = Afts_Ipv4EntryKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_Ipv4EntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv4EntryKey) ProtoMessage() {}

func (x *Afts_Ipv4EntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv4EntryKey.ProtoReflect.Descriptor instead.
func (*Afts_Ipv4EntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Afts_Ipv4EntryKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Afts_Ipv4EntryKey) GetIpv4Entry() *Afts_Ipv4Entry {
	if x != nil {
		return x.Ipv4Entry
	}
	return nil
}

type Afts_Ipv6Entry struct {
	state                       protoimpl.MessageState                          `protogen:"open.v1"`
	DecapsulateHeader           enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,328774623,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EntryMetadata               *ywrapper.BytesValue                            `protobuf:"bytes,11794282,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                             `protobuf:"bytes,442121607,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                           `protobuf:"bytes,492017618,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Afts_Ipv6Entry) Reset() {
	*x = Afts_Ipv6Entry{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_Ipv6Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv6Entry) ProtoMessage() {}

func (x *Afts_Ipv6Entry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv6Entry.ProtoReflect.Descriptor instead.
func (*Afts_Ipv6Entry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Afts_Ipv6Entry) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_Ipv6Entry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_Ipv6Entry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_Ipv6Entry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_Ipv6EntryKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Ipv6Entry     *Afts_Ipv6Entry        `protobuf:"bytes,2,opt,name=ipv6_entry,json=ipv6Entry,proto3" json:"ipv6_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_Ipv6EntryKey) Reset() {
	*x = Afts_Ipv6EntryKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_Ipv6EntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv6EntryKey) ProtoMessage() {}

func (x *Afts_Ipv6EntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv6EntryKey.ProtoReflect.Descriptor instead.
func (*Afts_Ipv6EntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Afts_Ipv6EntryKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Afts_Ipv6EntryKey) GetIpv6Entry() *Afts_Ipv6Entry {
	if x != nil {
		return x.Ipv6Entry
	}
	return nil
}

type Afts_LabelEntry struct {
	state                       protoimpl.MessageState                       `protogen:"open.v1"`
	EntryMetadata               *ywrapper.BytesValue                         `protobuf:"bytes,100486674,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                          `protobuf:"bytes,307713279,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                        `protobuf:"bytes,303628026,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	PoppedMplsLabelStack        []*Afts_LabelEntry_PoppedMplsLabelStackUnion `protobuf:"bytes,62799927,rep,name=popped_mpls_label_stack,json=poppedMplsLabelStack,proto3" json:"popped_mpls_label_stack,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Afts_LabelEntry) Reset() {
	*x = Afts_LabelEntry{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_LabelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntry) ProtoMessage() {}

func (x *Afts_LabelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntry.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Afts_LabelEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_LabelEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_LabelEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

func (x *Afts_LabelEntry) GetPoppedMplsLabelStack() []*Afts_LabelEntry_PoppedMplsLabelStackUnion {
	if x != nil {
		return x.PoppedMplsLabelStack
	}
	return nil
}

type Afts_LabelEntryKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Label:
	//
	//	*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum
	//	*Afts_LabelEntryKey_LabelUint64
	Label         isAfts_LabelEntryKey_Label `protobuf_oneof:"label"`
	LabelEntry    *Afts_LabelEntry           `protobuf:"bytes,2,opt,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_LabelEntryKey) Reset() {
	*x = Afts_LabelEntryKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_LabelEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntryKey) ProtoMessage() {}

func (x *Afts_LabelEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Afts_LabelEntryKey) GetLabel() isAfts_LabelEntryKey_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Afts_LabelEntryKey) GetLabelOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		if x, ok := x.Label.(*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum); ok {
			return x.LabelOpenconfigmplstypesmplslabelenum
		}
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_LabelEntryKey) GetLabelUint64() uint64 {
	if x != nil {
		if x, ok := x.Label.(*Afts_LabelEntryKey_LabelUint64); ok {
			return x.LabelUint64
		}
	}
	return 0
}

func (x *Afts_LabelEntryKey) GetLabelEntry() *Afts_LabelEntry {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

type isAfts_LabelEntryKey_Label interface {
	isAfts_LabelEntryKey_Label()
}

type Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum struct {
	LabelOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,505941675,opt,name=label_openconfigmplstypesmplslabelenum,json=labelOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum,oneof"`
}

type Afts_LabelEntryKey_LabelUint64 struct {
	LabelUint64 uint64 `protobuf:"varint,50948579,opt,name=label_uint64,json=labelUint64,proto3,oneof"`
}

func (*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum) isAfts_LabelEntryKey_Label() {}

func (*Afts_LabelEntryKey_LabelUint64) isAfts_LabelEntryKey_Label() {}

type Afts_MacEntry struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	EntryMetadata               *ywrapper.BytesValue   `protobuf:"bytes,397462192,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue    `protobuf:"bytes,320343041,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue  `protobuf:"bytes,264313412,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Afts_MacEntry) Reset() {
	*x = Afts_MacEntry{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_MacEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_MacEntry) ProtoMessage() {}

func (x *Afts_MacEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_MacEntry.ProtoReflect.Descriptor instead.
func (*Afts_MacEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Afts_MacEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_MacEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_MacEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_MacEntryKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MacAddress    string                 `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MacEntry      *Afts_MacEntry         `protobuf:"bytes,2,opt,name=mac_entry,json=macEntry,proto3" json:"mac_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_MacEntryKey) Reset() {
	*x = Afts_MacEntryKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_MacEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_MacEntryKey) ProtoMessage() {}

func (x *Afts_MacEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_MacEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_MacEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Afts_MacEntryKey) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Afts_MacEntryKey) GetMacEntry() *Afts_MacEntry {
	if x != nil {
		return x.MacEntry
	}
	return nil
}

type Afts_NextHop struct {
	state                protoimpl.MessageState                          `protogen:"open.v1"`
	DecapsulateHeader    enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,104970793,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EncapHeader          []*Afts_NextHop_EncapHeaderKey                  `protobuf:"bytes,125711186,rep,name=encap_header,json=encapHeader,proto3" json:"encap_header,omitempty"`
	EncapsulateHeader    enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,69966061,opt,name=encapsulate_header,json=encapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"encapsulate_header,omitempty"`
	Gre                  *Afts_NextHop_Gre                               `protobuf:"bytes,45203444,opt,name=gre,proto3" json:"gre,omitempty"`
	InterfaceRef         *Afts_NextHop_InterfaceRef                      `protobuf:"bytes,293682821,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	IpAddress            *ywrapper.StringValue                           `protobuf:"bytes,242108262,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpInIp               *Afts_NextHop_IpInIp                            `protobuf:"bytes,157296597,opt,name=ip_in_ip,json=ipInIp,proto3" json:"ip_in_ip,omitempty"`
	MacAddress           *ywrapper.StringValue                           `protobuf:"bytes,404609192,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkInstance      *ywrapper.StringValue                           `protobuf:"bytes,232391308,opt,name=network_instance,json=networkInstance,proto3" json:"network_instance,omitempty"`
	PopTopLabel          *ywrapper.BoolValue                             `protobuf:"bytes,382175404,opt,name=pop_top_label,json=popTopLabel,proto3" json:"pop_top_label,omitempty"`
	PushedMplsLabelStack []*Afts_NextHop_PushedMplsLabelStackUnion       `protobuf:"bytes,489592660,rep,name=pushed_mpls_label_stack,json=pushedMplsLabelStack,proto3" json:"pushed_mpls_label_stack,omitempty"`
	TunnelSrcIpAddress   *ywrapper.StringValue                           `protobuf:"bytes,174262178,opt,name=tunnel_src_ip_address,json=tunnelSrcIpAddress,proto3" json:"tunnel_src_ip_address,omitempty"`
	VniLabel             *ywrapper.UintValue                             `protobuf:"bytes,209933130,opt,name=vni_label,json=vniLabel,proto3" json:"vni_label,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Afts_NextHop) Reset() {
	*x = Afts_NextHop{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop) ProtoMessage() {}

func (x *Afts_NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop.ProtoReflect.Descriptor instead.
func (*Afts_NextHop) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Afts_NextHop) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_NextHop) GetEncapHeader() []*Afts_NextHop_EncapHeaderKey {
	if x != nil {
		return x.EncapHeader
	}
	return nil
}

func (x *Afts_NextHop) GetEncapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.EncapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_NextHop) GetGre() *Afts_NextHop_Gre {
	if x != nil {
		return x.Gre
	}
	return nil
}

func (x *Afts_NextHop) GetInterfaceRef() *Afts_NextHop_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Afts_NextHop) GetIpAddress() *ywrapper.StringValue {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *Afts_NextHop) GetIpInIp() *Afts_NextHop_IpInIp {
	if x != nil {
		return x.IpInIp
	}
	return nil
}

func (x *Afts_NextHop) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *Afts_NextHop) GetNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

func (x *Afts_NextHop) GetPopTopLabel() *ywrapper.BoolValue {
	if x != nil {
		return x.PopTopLabel
	}
	return nil
}

func (x *Afts_NextHop) GetPushedMplsLabelStack() []*Afts_NextHop_PushedMplsLabelStackUnion {
	if x != nil {
		return x.PushedMplsLabelStack
	}
	return nil
}

func (x *Afts_NextHop) GetTunnelSrcIpAddress() *ywrapper.StringValue {
	if x != nil {
		return x.TunnelSrcIpAddress
	}
	return nil
}

func (x *Afts_NextHop) GetVniLabel() *ywrapper.UintValue {
	if x != nil {
		return x.VniLabel
	}
	return nil
}

type Afts_NextHopGroup struct {
	state              protoimpl.MessageState          `protogen:"open.v1"`
	BackupNextHopGroup *ywrapper.UintValue             `protobuf:"bytes,366506898,opt,name=backup_next_hop_group,json=backupNextHopGroup,proto3" json:"backup_next_hop_group,omitempty"`
	Color              *ywrapper.UintValue             `protobuf:"bytes,242427279,opt,name=color,proto3" json:"color,omitempty"`
	NextHop            []*Afts_NextHopGroup_NextHopKey `protobuf:"bytes,211071474,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Afts_NextHopGroup) Reset() {
	*x = Afts_NextHopGroup{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup) ProtoMessage() {}

func (x *Afts_NextHopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Afts_NextHopGroup) GetBackupNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.BackupNextHopGroup
	}
	return nil
}

func (x *Afts_NextHopGroup) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Afts_NextHopGroup) GetNextHop() []*Afts_NextHopGroup_NextHopKey {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type Afts_NextHopGroupKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NextHopGroup  *Afts_NextHopGroup     `protobuf:"bytes,2,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHopGroupKey) Reset() {
	*x = Afts_NextHopGroupKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHopGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroupKey) ProtoMessage() {}

func (x *Afts_NextHopGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroupKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroupKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Afts_NextHopGroupKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Afts_NextHopGroupKey) GetNextHopGroup() *Afts_NextHopGroup {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

type Afts_NextHopKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	NextHop       *Afts_NextHop          `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHopKey) Reset() {
	*x = Afts_NextHopKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHopKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopKey) ProtoMessage() {}

func (x *Afts_NextHopKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Afts_NextHopKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_NextHopKey) GetNextHop() *Afts_NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type Afts_PolicyForwardingEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryMetadata *ywrapper.BytesValue   `protobuf:"bytes,141950242,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	IpDscp        *ywrapper.UintValue    `protobuf:"bytes,350830798,opt,name=ip_dscp,json=ipDscp,proto3" json:"ip_dscp,omitempty"`
	IpPrefix      *ywrapper.StringValue  `protobuf:"bytes,66278688,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	// Types that are valid to be assigned to IpProtocol:
	//
	//	*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Afts_PolicyForwardingEntry_IpProtocolUint64
	IpProtocol isAfts_PolicyForwardingEntry_IpProtocol `protobuf_oneof:"ip_protocol"`
	L4DstPort  *ywrapper.UintValue                     `protobuf:"bytes,447405406,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	L4SrcPort  *ywrapper.UintValue                     `protobuf:"bytes,502173263,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	MacAddress *ywrapper.StringValue                   `protobuf:"bytes,422272134,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Types that are valid to be assigned to MplsLabel:
	//
	//	*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum
	//	*Afts_PolicyForwardingEntry_MplsLabelUint64
	MplsLabel                   isAfts_PolicyForwardingEntry_MplsLabel `protobuf_oneof:"mpls_label"`
	MplsTc                      *ywrapper.UintValue                    `protobuf:"bytes,281754514,opt,name=mpls_tc,json=mplsTc,proto3" json:"mpls_tc,omitempty"`
	NextHopGroup                *ywrapper.UintValue                    `protobuf:"bytes,188303215,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                  `protobuf:"bytes,466188650,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Afts_PolicyForwardingEntry) Reset() {
	*x = Afts_PolicyForwardingEntry{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_PolicyForwardingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_PolicyForwardingEntry) ProtoMessage() {}

func (x *Afts_PolicyForwardingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_PolicyForwardingEntry.ProtoReflect.Descriptor instead.
func (*Afts_PolicyForwardingEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 12}
}

func (x *Afts_PolicyForwardingEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpDscp() *ywrapper.UintValue {
	if x != nil {
		return x.IpDscp
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.IpPrefix
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpProtocol() isAfts_PolicyForwardingEntry_IpProtocol {
	if x != nil {
		return x.IpProtocol
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpProtocolOpenconfigpacketmatchtypesipprotocol() enums.OpenconfigPacketMatchTypesIPPROTOCOL {
	if x != nil {
		if x, ok := x.IpProtocol.(*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol); ok {
			return x.IpProtocolOpenconfigpacketmatchtypesipprotocol
		}
	}
	return enums.OpenconfigPacketMatchTypesIPPROTOCOL(0)
}

func (x *Afts_PolicyForwardingEntry) GetIpProtocolUint64() uint64 {
	if x != nil {
		if x, ok := x.IpProtocol.(*Afts_PolicyForwardingEntry_IpProtocolUint64); ok {
			return x.IpProtocolUint64
		}
	}
	return 0
}

func (x *Afts_PolicyForwardingEntry) GetL4DstPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4DstPort
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetL4SrcPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4SrcPort
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetMplsLabel() isAfts_PolicyForwardingEntry_MplsLabel {
	if x != nil {
		return x.MplsLabel
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetMplsLabelOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		if x, ok := x.MplsLabel.(*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum); ok {
			return x.MplsLabelOpenconfigmplstypesmplslabelenum
		}
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_PolicyForwardingEntry) GetMplsLabelUint64() uint64 {
	if x != nil {
		if x, ok := x.MplsLabel.(*Afts_PolicyForwardingEntry_MplsLabelUint64); ok {
			return x.MplsLabelUint64
		}
	}
	return 0
}

func (x *Afts_PolicyForwardingEntry) GetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.MplsTc
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type isAfts_PolicyForwardingEntry_IpProtocol interface {
	isAfts_PolicyForwardingEntry_IpProtocol()
}

type Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol struct {
	IpProtocolOpenconfigpacketmatchtypesipprotocol enums.OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,157826780,opt,name=ip_protocol_openconfigpacketmatchtypesipprotocol,json=ipProtocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Afts_PolicyForwardingEntry_IpProtocolUint64 struct {
	IpProtocolUint64 uint64 `protobuf:"varint,248927945,opt,name=ip_protocol_uint64,json=ipProtocolUint64,proto3,oneof"`
}

func (*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol) isAfts_PolicyForwardingEntry_IpProtocol() {
}

func (*Afts_PolicyForwardingEntry_IpProtocolUint64) isAfts_PolicyForwardingEntry_IpProtocol() {}

type isAfts_PolicyForwardingEntry_MplsLabel interface {
	isAfts_PolicyForwardingEntry_MplsLabel()
}

type Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum struct {
	MplsLabelOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,47620234,opt,name=mpls_label_openconfigmplstypesmplslabelenum,json=mplsLabelOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum,oneof"`
}

type Afts_PolicyForwardingEntry_MplsLabelUint64 struct {
	MplsLabelUint64 uint64 `protobuf:"varint,306275022,opt,name=mpls_label_uint64,json=mplsLabelUint64,proto3,oneof"`
}

func (*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum) isAfts_PolicyForwardingEntry_MplsLabel() {
}

func (*Afts_PolicyForwardingEntry_MplsLabelUint64) isAfts_PolicyForwardingEntry_MplsLabel() {}

type Afts_PolicyForwardingEntryKey struct {
	state                 protoimpl.MessageState      `protogen:"open.v1"`
	Index                 uint64                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PolicyForwardingEntry *Afts_PolicyForwardingEntry `protobuf:"bytes,2,opt,name=policy_forwarding_entry,json=policyForwardingEntry,proto3" json:"policy_forwarding_entry,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Afts_PolicyForwardingEntryKey) Reset() {
	*x = Afts_PolicyForwardingEntryKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_PolicyForwardingEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_PolicyForwardingEntryKey) ProtoMessage() {}

func (x *Afts_PolicyForwardingEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_PolicyForwardingEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_PolicyForwardingEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Afts_PolicyForwardingEntryKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_PolicyForwardingEntryKey) GetPolicyForwardingEntry() *Afts_PolicyForwardingEntry {
	if x != nil {
		return x.PolicyForwardingEntry
	}
	return nil
}

type Afts_LabelEntry_PoppedMplsLabelStackUnion struct {
	state                                                protoimpl.MessageState                 `protogen:"open.v1"`
	PoppedMplsLabelStackOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,524692292,opt,name=popped_mpls_label_stack_openconfigmplstypesmplslabelenum,json=poppedMplsLabelStackOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum" json:"popped_mpls_label_stack_openconfigmplstypesmplslabelenum,omitempty"`
	PoppedMplsLabelStackUint64                           uint64                                 `protobuf:"varint,510588408,opt,name=popped_mpls_label_stack_uint64,json=poppedMplsLabelStackUint64,proto3" json:"popped_mpls_label_stack_uint64,omitempty"`
	unknownFields                                        protoimpl.UnknownFields
	sizeCache                                            protoimpl.SizeCache
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) Reset() {
	*x = Afts_LabelEntry_PoppedMplsLabelStackUnion{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntry_PoppedMplsLabelStackUnion) ProtoMessage() {}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntry_PoppedMplsLabelStackUnion.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntry_PoppedMplsLabelStackUnion) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) GetPoppedMplsLabelStackOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		return x.PoppedMplsLabelStackOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) GetPoppedMplsLabelStackUint64() uint64 {
	if x != nil {
		return x.PoppedMplsLabelStackUint64
	}
	return 0
}

type Afts_NextHop_EncapHeader struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Gre           *Afts_NextHop_EncapHeader_Gre                   `protobuf:"bytes,301373623,opt,name=gre,proto3" json:"gre,omitempty"`
	Ipv4          *Afts_NextHop_EncapHeader_Ipv4                  `protobuf:"bytes,191386200,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6          *Afts_NextHop_EncapHeader_Ipv6                  `protobuf:"bytes,191386202,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Mpls          *Afts_NextHop_EncapHeader_Mpls                  `protobuf:"bytes,393605309,opt,name=mpls,proto3" json:"mpls,omitempty"`
	Type          enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,254997883,opt,name=type,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"type,omitempty"`
	UdpV4         *Afts_NextHop_EncapHeader_UdpV4                 `protobuf:"bytes,171499561,opt,name=udp_v4,json=udpV4,proto3" json:"udp_v4,omitempty"`
	UdpV6         *Afts_NextHop_EncapHeader_UdpV6                 `protobuf:"bytes,171499563,opt,name=udp_v6,json=udpV6,proto3" json:"udp_v6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader) Reset() {
	*x = Afts_NextHop_EncapHeader{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0}
}

func (x *Afts_NextHop_EncapHeader) GetGre() *Afts_NextHop_EncapHeader_Gre {
	if x != nil {
		return x.Gre
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader) GetIpv4() *Afts_NextHop_EncapHeader_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader) GetIpv6() *Afts_NextHop_EncapHeader_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader) GetMpls() *Afts_NextHop_EncapHeader_Mpls {
	if x != nil {
		return x.Mpls
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader) GetType() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.Type
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_NextHop_EncapHeader) GetUdpV4() *Afts_NextHop_EncapHeader_UdpV4 {
	if x != nil {
		return x.UdpV4
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader) GetUdpV6() *Afts_NextHop_EncapHeader_UdpV6 {
	if x != nil {
		return x.UdpV6
	}
	return nil
}

type Afts_NextHop_EncapHeaderKey struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Index         uint64                    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	EncapHeader   *Afts_NextHop_EncapHeader `protobuf:"bytes,2,opt,name=encap_header,json=encapHeader,proto3" json:"encap_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeaderKey) Reset() {
	*x = Afts_NextHop_EncapHeaderKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeaderKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeaderKey) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeaderKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeaderKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeaderKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 1}
}

func (x *Afts_NextHop_EncapHeaderKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_NextHop_EncapHeaderKey) GetEncapHeader() *Afts_NextHop_EncapHeader {
	if x != nil {
		return x.EncapHeader
	}
	return nil
}

type Afts_NextHop_Gre struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,434950232,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,440591545,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	Ttl           *ywrapper.UintValue    `protobuf:"bytes,108564691,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_Gre) Reset() {
	*x = Afts_NextHop_Gre{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_Gre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_Gre) ProtoMessage() {}

func (x *Afts_NextHop_Gre) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_Gre.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_Gre) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 2}
}

func (x *Afts_NextHop_Gre) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_Gre) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *Afts_NextHop_Gre) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Afts_NextHop_InterfaceRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     *ywrapper.StringValue  `protobuf:"bytes,366751031,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface  *ywrapper.UintValue    `protobuf:"bytes,488145333,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_InterfaceRef) Reset() {
	*x = Afts_NextHop_InterfaceRef{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_InterfaceRef) ProtoMessage() {}

func (x *Afts_NextHop_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 3}
}

func (x *Afts_NextHop_InterfaceRef) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Afts_NextHop_InterfaceRef) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Afts_NextHop_IpInIp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,184775743,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,220560118,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_IpInIp) Reset() {
	*x = Afts_NextHop_IpInIp{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_IpInIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_IpInIp) ProtoMessage() {}

func (x *Afts_NextHop_IpInIp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_IpInIp.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_IpInIp) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 4}
}

func (x *Afts_NextHop_IpInIp) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_IpInIp) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

type Afts_NextHop_PushedMplsLabelStackUnion struct {
	state                                                protoimpl.MessageState                 `protogen:"open.v1"`
	PushedMplsLabelStackOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,307755077,opt,name=pushed_mpls_label_stack_openconfigmplstypesmplslabelenum,json=pushedMplsLabelStackOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum" json:"pushed_mpls_label_stack_openconfigmplstypesmplslabelenum,omitempty"`
	PushedMplsLabelStackUint64                           uint64                                 `protobuf:"varint,47493573,opt,name=pushed_mpls_label_stack_uint64,json=pushedMplsLabelStackUint64,proto3" json:"pushed_mpls_label_stack_uint64,omitempty"`
	unknownFields                                        protoimpl.UnknownFields
	sizeCache                                            protoimpl.SizeCache
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) Reset() {
	*x = Afts_NextHop_PushedMplsLabelStackUnion{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_PushedMplsLabelStackUnion) ProtoMessage() {}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_PushedMplsLabelStackUnion.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_PushedMplsLabelStackUnion) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 5}
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) GetPushedMplsLabelStackOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		return x.PushedMplsLabelStackOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) GetPushedMplsLabelStackUint64() uint64 {
	if x != nil {
		return x.PushedMplsLabelStackUint64
	}
	return 0
}

type Afts_NextHop_EncapHeader_Gre struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,330920437,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,509569356,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	Ttl           *ywrapper.UintValue    `protobuf:"bytes,267157040,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_Gre) Reset() {
	*x = Afts_NextHop_EncapHeader_Gre{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_Gre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_Gre) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_Gre) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_Gre.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_Gre) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 0}
}

func (x *Afts_NextHop_EncapHeader_Gre) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_Gre) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_Gre) GetTtl() *ywrapper.UintValue {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Afts_NextHop_EncapHeader_Ipv4 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,403354420,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,293130725,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_Ipv4) Reset() {
	*x = Afts_NextHop_EncapHeader_Ipv4{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_Ipv4) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_Ipv4.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_Ipv4) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 1}
}

func (x *Afts_NextHop_EncapHeader_Ipv4) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_Ipv4) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

type Afts_NextHop_EncapHeader_Ipv6 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,469869578,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,254664891,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_Ipv6) Reset() {
	*x = Afts_NextHop_EncapHeader_Ipv6{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_Ipv6) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_Ipv6.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_Ipv6) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 2}
}

func (x *Afts_NextHop_EncapHeader_Ipv6) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_Ipv6) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

type Afts_NextHop_EncapHeader_Mpls struct {
	state          protoimpl.MessageState                               `protogen:"open.v1"`
	MplsLabelStack []*Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion `protobuf:"bytes,310218456,rep,name=mpls_label_stack,json=mplsLabelStack,proto3" json:"mpls_label_stack,omitempty"`
	TrafficClass   *ywrapper.UintValue                                  `protobuf:"bytes,380564126,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_Mpls) Reset() {
	*x = Afts_NextHop_EncapHeader_Mpls{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_Mpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_Mpls) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_Mpls) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_Mpls.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_Mpls) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 3}
}

func (x *Afts_NextHop_EncapHeader_Mpls) GetMplsLabelStack() []*Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion {
	if x != nil {
		return x.MplsLabelStack
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_Mpls) GetTrafficClass() *ywrapper.UintValue {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

type Afts_NextHop_EncapHeader_UdpV4 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dscp          *ywrapper.UintValue    `protobuf:"bytes,404304264,opt,name=dscp,proto3" json:"dscp,omitempty"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,425782075,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstUdpPort    *ywrapper.UintValue    `protobuf:"bytes,26930775,opt,name=dst_udp_port,json=dstUdpPort,proto3" json:"dst_udp_port,omitempty"`
	IpTtl         *ywrapper.UintValue    `protobuf:"bytes,489501006,opt,name=ip_ttl,json=ipTtl,proto3" json:"ip_ttl,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,223532242,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcUdpPort    *ywrapper.UintValue    `protobuf:"bytes,332943154,opt,name=src_udp_port,json=srcUdpPort,proto3" json:"src_udp_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_UdpV4) Reset() {
	*x = Afts_NextHop_EncapHeader_UdpV4{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_UdpV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_UdpV4) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_UdpV4) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_UdpV4.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_UdpV4) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 4}
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetDstUdpPort() *ywrapper.UintValue {
	if x != nil {
		return x.DstUdpPort
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetIpTtl() *ywrapper.UintValue {
	if x != nil {
		return x.IpTtl
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV4) GetSrcUdpPort() *ywrapper.UintValue {
	if x != nil {
		return x.SrcUdpPort
	}
	return nil
}

type Afts_NextHop_EncapHeader_UdpV6 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dscp          *ywrapper.UintValue    `protobuf:"bytes,493128346,opt,name=dscp,proto3" json:"dscp,omitempty"`
	DstIp         *ywrapper.StringValue  `protobuf:"bytes,148029921,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstUdpPort    *ywrapper.UintValue    `protobuf:"bytes,275733981,opt,name=dst_udp_port,json=dstUdpPort,proto3" json:"dst_udp_port,omitempty"`
	IpTtl         *ywrapper.UintValue    `protobuf:"bytes,394480800,opt,name=ip_ttl,json=ipTtl,proto3" json:"ip_ttl,omitempty"`
	SrcIp         *ywrapper.StringValue  `protobuf:"bytes,494881688,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcUdpPort    *ywrapper.UintValue    `protobuf:"bytes,485812424,opt,name=src_udp_port,json=srcUdpPort,proto3" json:"src_udp_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_UdpV6) Reset() {
	*x = Afts_NextHop_EncapHeader_UdpV6{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_UdpV6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_UdpV6) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_UdpV6) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_UdpV6.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_UdpV6) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 5}
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetDscp() *ywrapper.UintValue {
	if x != nil {
		return x.Dscp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetDstUdpPort() *ywrapper.UintValue {
	if x != nil {
		return x.DstUdpPort
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetIpTtl() *ywrapper.UintValue {
	if x != nil {
		return x.IpTtl
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *Afts_NextHop_EncapHeader_UdpV6) GetSrcUdpPort() *ywrapper.UintValue {
	if x != nil {
		return x.SrcUdpPort
	}
	return nil
}

type Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion struct {
	state                                          protoimpl.MessageState                 `protogen:"open.v1"`
	MplsLabelStackOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,212167609,opt,name=mpls_label_stack_openconfigmplstypesmplslabelenum,json=mplsLabelStackOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum" json:"mpls_label_stack_openconfigmplstypesmplslabelenum,omitempty"`
	MplsLabelStackUint64                           uint64                                 `protobuf:"varint,205621201,opt,name=mpls_label_stack_uint64,json=mplsLabelStackUint64,proto3" json:"mpls_label_stack_uint64,omitempty"`
	unknownFields                                  protoimpl.UnknownFields
	sizeCache                                      protoimpl.SizeCache
}

func (x *Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) Reset() {
	*x = Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) ProtoMessage() {}

func (x *Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0, 3, 0}
}

func (x *Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) GetMplsLabelStackOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		return x.MplsLabelStackOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion) GetMplsLabelStackUint64() uint64 {
	if x != nil {
		return x.MplsLabelStackUint64
	}
	return 0
}

type Afts_NextHopGroup_NextHop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weight        *ywrapper.UintValue    `protobuf:"bytes,202140175,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHopGroup_NextHop) Reset() {
	*x = Afts_NextHopGroup_NextHop{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHopGroup_NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup_NextHop) ProtoMessage() {}

func (x *Afts_NextHopGroup_NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup_NextHop.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup_NextHop) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9, 0}
}

func (x *Afts_NextHopGroup_NextHop) GetWeight() *ywrapper.UintValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Afts_NextHopGroup_NextHopKey struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Index         uint64                     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	NextHop       *Afts_NextHopGroup_NextHop `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Afts_NextHopGroup_NextHopKey) Reset() {
	*x = Afts_NextHopGroup_NextHopKey{}
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Afts_NextHopGroup_NextHopKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup_NextHopKey) ProtoMessage() {}

func (x *Afts_NextHopGroup_NextHopKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup_NextHopKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup_NextHopKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9, 1}
}

func (x *Afts_NextHopGroup_NextHopKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_NextHopGroup_NextHopKey) GetNextHop() *Afts_NextHopGroup_NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

var File_v1_proto_gribi_aft_gribi_aft_proto protoreflect.FileDescriptor

var file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x5f, 0x61, 0x66, 0x74, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x1a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x65, 0x78, 0x74,
	0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x61,
	0x66, 0x74, 0x73, 0x18, 0xb4, 0x96, 0x94, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x42, 0x08, 0x82,
	0x41, 0x05, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x52, 0x04, 0x61, 0x66, 0x74, 0x73, 0x22, 0xb5, 0x73,
	0x0a, 0x04, 0x41, 0x66, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xd7, 0xd7, 0xd8, 0xc3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x20, 0x82, 0x41,
	0x1d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x83, 0xce, 0xcb, 0xc0, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66,
	0x74, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x20, 0x82, 0x41, 0x1d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xdb, 0xc1, 0x94, 0x49,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70,
	0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x61,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xc1, 0x9e, 0xa8, 0x4d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74,
	0x73, 0x2e, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x1b, 0x82,
	0x41, 0x18, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0xb1, 0xcd, 0xa0, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x72, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf9, 0xd9,
	0x8b, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f,
	0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x98, 0x01, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x8b, 0x97, 0xc3, 0x80,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xcd, 0x04, 0x0a, 0x09, 0x49,
	0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x93, 0xef, 0x81, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe6, 0x9c, 0xdd, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x74, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x93, 0xcc,
	0x8a, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xfe, 0xb3, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x0c, 0x49,
	0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x6a, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x1a, 0xcd, 0x04, 0x0a, 0x09, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0xa8, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xdf, 0xe7, 0xe2, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0e, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xea, 0xee, 0xcf,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x74, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x87, 0xfb, 0xe8, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa7, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xd2, 0xaf, 0xce, 0xea,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41,
	0x43, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x6a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38,
	0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41,
	0x66, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69,
	0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xc3, 0x07, 0x0a, 0x0a, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x92, 0x9c, 0xf5, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xff, 0xa9, 0xdd, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xfa, 0xfd, 0xe3, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x70, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0xb7, 0x80, 0xf9, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d,
	0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c,
	0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0xe0, 0x49, 0x01,
	0x52, 0x14, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x85, 0x03, 0x0a, 0x19, 0x50, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xe6, 0x01, 0x0a, 0x38, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xc4, 0xd6, 0x98, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x34, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x7f, 0x0a,
	0x1e, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xf8, 0xeb, 0xbb, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x1a, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x96,
	0x03, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0xd2, 0x01, 0x0a, 0x26, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70,
	0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xab, 0x9d, 0xa0, 0xf1,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7c,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x25,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x6a, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe3, 0xd3, 0xa5, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61,
	0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x92, 0x03, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb0, 0x95, 0xc3, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x81, 0x98, 0xe0, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa1, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc4, 0xb4, 0x84,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb9, 0x01, 0x0a,
	0x0b, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xfc, 0x37, 0x0a, 0x07, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xa9, 0xf4, 0x86, 0x32,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xd2, 0xe6, 0xf8, 0x3b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e,
	0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x82, 0x41, 0x33,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0xa2, 0x01, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xed, 0xb1, 0xae, 0x21, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0x82, 0x41,
	0x31, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x03, 0x67, 0x72, 0x65, 0x18, 0xf4, 0xff, 0xc6,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x47,
	0x72, 0x65, 0x42, 0x1f, 0x82, 0x41, 0x1c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f,
	0x67, 0x72, 0x65, 0x52, 0x03, 0x67, 0x72, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x85, 0xfd, 0x84, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e,
	0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x65, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xe6, 0x8e, 0xb9, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0xd5, 0xcf, 0x80, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x49, 0x70, 0x42, 0x24,
	0x82, 0x41, 0x21, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x70, 0x2d, 0x69,
	0x6e, 0x2d, 0x69, 0x70, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x49, 0x70, 0x12, 0x69, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa8, 0xb1, 0xf7, 0xc0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41,
	0x2a, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x8c, 0x85, 0xe8, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82, 0x41, 0x2f,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x6c, 0x0a, 0x0d, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0xac, 0x91, 0x9e, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x2d, 0x74, 0x6f, 0x70, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x0b, 0x70, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xaa,
	0x01, 0x0a, 0x17, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0xd4, 0xae, 0xba, 0xe9, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3c, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0xe0, 0x49, 0x01, 0x52, 0x14, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x84, 0x01, 0x0a, 0x15,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa2, 0x8f, 0x8c, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d,
	0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x76, 0x6e, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0xca, 0xa6, 0x8d, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82,
	0x41, 0x28, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x6e, 0x69, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x08, 0x76, 0x6e, 0x69, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x1a, 0xb4, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x03, 0x67, 0x72, 0x65, 0x18, 0xb7, 0xb1, 0xda, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x65, 0x52, 0x03, 0x67, 0x72, 0x65, 0x12,
	0x7c, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0xd8, 0xa4, 0xa1, 0x5b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74,
	0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f,
	0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x7c, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0xda, 0xa4, 0xa1, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x7d, 0x0a, 0x04, 0x6d,
	0x70, 0x6c, 0x73, 0x18, 0xbd, 0xe1, 0xd7, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f,
	0x6d, 0x70, 0x6c, 0x73, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xfb, 0xea, 0xcb, 0x79, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67,
	0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x41, 0x82, 0x41, 0x3e, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x75, 0x64, 0x70, 0x5f, 0x76, 0x34, 0x18, 0xa9, 0xc0, 0xe3,
	0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x64, 0x70, 0x56, 0x34,
	0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x34, 0x52,
	0x05, 0x75, 0x64, 0x70, 0x56, 0x34, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x75, 0x64, 0x70, 0x5f, 0x76,
	0x36, 0x18, 0xab, 0xc0, 0xe3, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x69,
	0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x64, 0x70, 0x56, 0x36, 0x42, 0x3d, 0x82, 0x41, 0x3a, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64,
	0x70, 0x2d, 0x76, 0x36, 0x52, 0x05, 0x75, 0x64, 0x70, 0x56, 0x36, 0x1a, 0xeb, 0x02, 0x0a, 0x03,
	0x47, 0x72, 0x65, 0x12, 0x79, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0xf5, 0xe3,
	0xe5, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x79,
	0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xcc, 0xd2, 0xfd, 0xf2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x67, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x2d,
	0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x6e, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0xb0, 0xfc, 0xb1, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0xfe, 0x01, 0x0a, 0x04, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x7a, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0xb4, 0xe6, 0xaa,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82,
	0x41, 0x45, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x7a,
	0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xe5, 0xa3, 0xe3, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63,
	0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x1a, 0xfd, 0x01, 0x0a, 0x04, 0x49,
	0x70, 0x76, 0x36, 0x12, 0x7a, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x8a, 0xc8,
	0x86, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48,
	0x82, 0x41, 0x45, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x79, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xbb, 0xc1, 0xb7, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63,
	0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x1a, 0xf7, 0x05, 0x0a, 0x04, 0x4d,
	0x70, 0x6c, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0xd8, 0x9d, 0xf6, 0x93, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41,
	0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x55, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0xe0, 0x49, 0x01, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x9e, 0xe5, 0xbb, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x9a, 0x03, 0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0xf3, 0x01, 0x0a, 0x31, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xb9, 0xd7, 0x95, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xd1, 0x8f, 0x86, 0x62, 0x20, 0x01, 0x28, 0x04, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f,
	0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70,
	0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x14,
	0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x1a, 0x90, 0x06, 0x0a, 0x05, 0x55, 0x64, 0x70, 0x56, 0x34, 0x12, 0x75,
	0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x88, 0xe3, 0xe4, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64,
	0x70, 0x2d, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x63, 0x70, 0x52,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x7c, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0xbb, 0xd6, 0x83, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x34, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x64, 0x70, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0xd7, 0xdc, 0xeb, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76,
	0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x75, 0x64, 0x70, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x7a, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xce, 0xe2, 0xb4, 0xe9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x70, 0x2d, 0x74, 0x74, 0x6c, 0x52, 0x05, 0x69, 0x70, 0x54, 0x74, 0x6c, 0x12, 0x7b, 0x0a, 0x06,
	0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xd2, 0xa9, 0xcb, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75,
	0x64, 0x70, 0x2d, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x2d,
	0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x73, 0x72,
	0x63, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb2, 0x9e, 0xe1, 0x9e, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x34, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x72, 0x63, 0x2d, 0x75, 0x64, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x91, 0x06, 0x0a, 0x05, 0x55, 0x64, 0x70, 0x56,
	0x36, 0x12, 0x75, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x9a, 0x95, 0x92, 0xeb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73,
	0x63, 0x70, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x7b, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0xe1, 0x83, 0xcb, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76,
	0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xdd, 0xbb, 0xbd, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82, 0x41, 0x4d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64,
	0x70, 0x2d, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x75,
	0x64, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x55, 0x64, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x7a, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xa0, 0x99,
	0x8d, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41,
	0x47, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x70, 0x2d, 0x74, 0x74, 0x6c, 0x52, 0x05, 0x69, 0x70, 0x54, 0x74, 0x6c, 0x12,
	0x7c, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x98, 0x97, 0xfd, 0xeb, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4a, 0x82, 0x41, 0x47, 0x2f,
	0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x8b, 0x01,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xc8,
	0xd1, 0xd3, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x82,
	0x41, 0x4d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x64, 0x70, 0x2d, 0x76, 0x36, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x75, 0x64, 0x70, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0a, 0x73, 0x72, 0x63, 0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xed, 0x01, 0x0a, 0x0e,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x92,
	0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x7c,
	0x82, 0x41, 0x79, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x9a, 0x02, 0x0a, 0x03,
	0x47, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0xd8, 0xa0,
	0xb3, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c,
	0x82, 0x41, 0x29, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x67, 0x72, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0xb9, 0xc9,
	0x8b, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c,
	0x82, 0x41, 0x29, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x67, 0x72, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x49, 0x70, 0x12, 0x53, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0xd3, 0xa1, 0xe2, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x67, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0xfd, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x72, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb7, 0xda, 0xf0, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72,
	0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x79, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb5, 0x83,
	0xe2, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41,
	0x39, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x49, 0x70, 0x49,
	0x6e, 0x49, 0x70, 0x12, 0x62, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0xbf, 0xe8,
	0x8d, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0x82,
	0x41, 0x2e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x70, 0x2d, 0x69, 0x6e,
	0x2d, 0x69, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d, 0x69, 0x70,
	0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0xf6, 0xf5, 0x95, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69,
	0x70, 0x2d, 0x69, 0x6e, 0x2d, 0x69, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x72,
	0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x1a, 0x89, 0x03, 0x0a, 0x19,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xe8, 0x01, 0x0a, 0x38, 0x70, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc5, 0xf0, 0xdf, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x6d, 0x70,
	0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x34,
	0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70,
	0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x6e, 0x75, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc5, 0xe3, 0xd2, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x1a, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xfb, 0x05, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x92, 0xe7, 0xe1, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x8f, 0xcb, 0xcc, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x81, 0x01,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0xf2, 0xe3, 0xd2, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e,
	0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x3a, 0x82, 0x41,
	0x37, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x1a, 0x82, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x77, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x8f, 0xd4, 0xb1, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7c,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61,
	0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x68, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x9e, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7c, 0x2f,
	0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61,
	0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xa1, 0x0f, 0x0a, 0x15, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa2, 0xfa, 0xd7, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a, 0x07,
	0x69, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xce, 0x81, 0xa5, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x70, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x06, 0x69, 0x70, 0x44, 0x73, 0x63, 0x70,
	0x12, 0x79, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xa0, 0xaa,
	0xcd, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x42, 0x82,
	0x41, 0x3f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xea, 0x01, 0x0a, 0x30,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0xdc, 0xfd, 0xa0, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x2e, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x77, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc9,
	0xad, 0xd9, 0x76, 0x20, 0x01, 0x28, 0x04, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x7d, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0xde, 0xba, 0xab, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x34, 0x2d, 0x64, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x7d, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0xcf, 0x9c, 0xba, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x44,
	0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x34, 0x2d, 0x73, 0x72, 0x63, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x80, 0x01, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x86, 0xb9, 0xad, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x2b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x8a, 0xc1, 0xda, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x43,
	0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x29, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x75, 0x0a, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xce, 0xc5, 0x85, 0x92, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x72, 0x0a, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x63, 0x18, 0x92, 0xf7, 0xac, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73,
	0x2d, 0x74, 0x63, 0x52, 0x06, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x12, 0x85, 0x01, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xef,
	0x8e, 0xe5, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41,
	0x44, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0xb9, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xea, 0xf2, 0xa5, 0xde, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x86, 0x02, 0x0a,
	0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5d, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f,
	0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67,
	0x72, 0x69, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescOnce sync.Once
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData = file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc
)

func file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP() []byte {
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescOnce.Do(func() {
		file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData)
	})
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData
}

var file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_v1_proto_gribi_aft_gribi_aft_proto_goTypes = []any{
	(*Device)(nil),                                            // 0: gribi_aft.Device
	(*Afts)(nil),                                              // 1: gribi_aft.Afts
	(*Afts_Ipv4Entry)(nil),                                    // 2: gribi_aft.Afts.Ipv4Entry
	(*Afts_Ipv4EntryKey)(nil),                                 // 3: gribi_aft.Afts.Ipv4EntryKey
	(*Afts_Ipv6Entry)(nil),                                    // 4: gribi_aft.Afts.Ipv6Entry
	(*Afts_Ipv6EntryKey)(nil),                                 // 5: gribi_aft.Afts.Ipv6EntryKey
	(*Afts_LabelEntry)(nil),                                   // 6: gribi_aft.Afts.LabelEntry
	(*Afts_LabelEntryKey)(nil),                                // 7: gribi_aft.Afts.LabelEntryKey
	(*Afts_MacEntry)(nil),                                     // 8: gribi_aft.Afts.MacEntry
	(*Afts_MacEntryKey)(nil),                                  // 9: gribi_aft.Afts.MacEntryKey
	(*Afts_NextHop)(nil),                                      // 10: gribi_aft.Afts.NextHop
	(*Afts_NextHopGroup)(nil),                                 // 11: gribi_aft.Afts.NextHopGroup
	(*Afts_NextHopGroupKey)(nil),                              // 12: gribi_aft.Afts.NextHopGroupKey
	(*Afts_NextHopKey)(nil),                                   // 13: gribi_aft.Afts.NextHopKey
	(*Afts_PolicyForwardingEntry)(nil),                        // 14: gribi_aft.Afts.PolicyForwardingEntry
	(*Afts_PolicyForwardingEntryKey)(nil),                     // 15: gribi_aft.Afts.PolicyForwardingEntryKey
	(*Afts_LabelEntry_PoppedMplsLabelStackUnion)(nil),         // 16: gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion
	(*Afts_NextHop_EncapHeader)(nil),                          // 17: gribi_aft.Afts.NextHop.EncapHeader
	(*Afts_NextHop_EncapHeaderKey)(nil),                       // 18: gribi_aft.Afts.NextHop.EncapHeaderKey
	(*Afts_NextHop_Gre)(nil),                                  // 19: gribi_aft.Afts.NextHop.Gre
	(*Afts_NextHop_InterfaceRef)(nil),                         // 20: gribi_aft.Afts.NextHop.InterfaceRef
	(*Afts_NextHop_IpInIp)(nil),                               // 21: gribi_aft.Afts.NextHop.IpInIp
	(*Afts_NextHop_PushedMplsLabelStackUnion)(nil),            // 22: gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion
	(*Afts_NextHop_EncapHeader_Gre)(nil),                      // 23: gribi_aft.Afts.NextHop.EncapHeader.Gre
	(*Afts_NextHop_EncapHeader_Ipv4)(nil),                     // 24: gribi_aft.Afts.NextHop.EncapHeader.Ipv4
	(*Afts_NextHop_EncapHeader_Ipv6)(nil),                     // 25: gribi_aft.Afts.NextHop.EncapHeader.Ipv6
	(*Afts_NextHop_EncapHeader_Mpls)(nil),                     // 26: gribi_aft.Afts.NextHop.EncapHeader.Mpls
	(*Afts_NextHop_EncapHeader_UdpV4)(nil),                    // 27: gribi_aft.Afts.NextHop.EncapHeader.UdpV4
	(*Afts_NextHop_EncapHeader_UdpV6)(nil),                    // 28: gribi_aft.Afts.NextHop.EncapHeader.UdpV6
	(*Afts_NextHop_EncapHeader_Mpls_MplsLabelStackUnion)(nil), // 29: gribi_aft.Afts.NextHop.EncapHeader.Mpls.MplsLabelStackUnion
	(*Afts_NextHopGroup_NextHop)(nil),                         // 30: gribi_aft.Afts.NextHopGroup.NextHop
	(*Afts_NextHopGroup_NextHopKey)(nil),                      // 31: gribi_aft.Afts.NextHopGroup.NextHopKey
	(enums.OpenconfigAftTypesEncapsulationHeaderType)(0),      // 32: gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	(*ywrapper.BytesValue)(nil),                               // 33: ywrapper.BytesValue
	(*ywrapper.UintValue)(nil),                                // 34: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                              // 35: ywrapper.StringValue
	(enums.OpenconfigMplsTypesMplsLabelEnum)(0),               // 36: gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	(*ywrapper.BoolValue)(nil),                                // 37: ywrapper.BoolValue
	(enums.OpenconfigPacketMatchTypesIPPROTOCOL)(0),           // 38: gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL
}
var file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs = []int32{
	1,  // 0: gribi_aft.Device.afts:type_name -> gribi_aft.Afts
	3,  // 1: gribi_aft.Afts.ipv4_entry:type_name -> gribi_aft.Afts.Ipv4EntryKey
	5,  // 2: gribi_aft.Afts.ipv6_entry:type_name -> gribi_aft.Afts.Ipv6EntryKey
	7,  // 3: gribi_aft.Afts.label_entry:type_name -> gribi_aft.Afts.LabelEntryKey
	9,  // 4: gribi_aft.Afts.mac_entry:type_name -> gribi_aft.Afts.MacEntryKey
	13, // 5: gribi_aft.Afts.next_hop:type_name -> gribi_aft.Afts.NextHopKey
	12, // 6: gribi_aft.Afts.next_hop_group:type_name -> gribi_aft.Afts.NextHopGroupKey
	15, // 7: gribi_aft.Afts.policy_forwarding_entry:type_name -> gribi_aft.Afts.PolicyForwardingEntryKey
	32, // 8: gribi_aft.Afts.Ipv4Entry.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	33, // 9: gribi_aft.Afts.Ipv4Entry.entry_metadata:type_name -> ywrapper.BytesValue
	34, // 10: gribi_aft.Afts.Ipv4Entry.next_hop_group:type_name -> ywrapper.UintValue
	35, // 11: gribi_aft.Afts.Ipv4Entry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	2,  // 12: gribi_aft.Afts.Ipv4EntryKey.ipv4_entry:type_name -> gribi_aft.Afts.Ipv4Entry
	32, // 13: gribi_aft.Afts.Ipv6Entry.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	33, // 14: gribi_aft.Afts.Ipv6Entry.entry_metadata:type_name -> ywrapper.BytesValue
	34, // 15: gribi_aft.Afts.Ipv6Entry.next_hop_group:type_name -> ywrapper.UintValue
	35, // 16: gribi_aft.Afts.Ipv6Entry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	4,  // 17: gribi_aft.Afts.Ipv6EntryKey.ipv6_entry:type_name -> gribi_aft.Afts.Ipv6Entry
	33, // 18: gribi_aft.Afts.LabelEntry.entry_metadata:type_name -> ywrapper.BytesValue
	34, // 19: gribi_aft.Afts.LabelEntry.next_hop_group:type_name -> ywrapper.UintValue
	35, // 20: gribi_aft.Afts.LabelEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	16, // 21: gribi_aft.Afts.LabelEntry.popped_mpls_label_stack:type_name -> gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion
	36, // 22: gribi_aft.Afts.LabelEntryKey.label_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	6,  // 23: gribi_aft.Afts.LabelEntryKey.label_entry:type_name -> gribi_aft.Afts.LabelEntry
	33, // 24: gribi_aft.Afts.MacEntry.entry_metadata:type_name -> ywrapper.BytesValue
	34, // 25: gribi_aft.Afts.MacEntry.next_hop_group:type_name -> ywrapper.UintValue
	35, // 26: gribi_aft.Afts.MacEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	8,  // 27: gribi_aft.Afts.MacEntryKey.mac_entry:type_name -> gribi_aft.Afts.MacEntry
	32, // 28: gribi_aft.Afts.NextHop.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	18, // 29: gribi_aft.Afts.NextHop.encap_header:type_name -> gribi_aft.Afts.NextHop.EncapHeaderKey
	32, // 30: gribi_aft.Afts.NextHop.encapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	19, // 31: gribi_aft.Afts.NextHop.gre:type_name -> gribi_aft.Afts.NextHop.Gre
	20, // 32: gribi_aft.Afts.NextHop.interface_ref:type_name -> gribi_aft.Afts.NextHop.InterfaceRef
	35, // 33: gribi_aft.Afts.NextHop.ip_address:type_name -> ywrapper.StringValue
	21, // 34: gribi_aft.Afts.NextHop.ip_in_ip:type_name -> gribi_aft.Afts.NextHop.IpInIp
	35, // 35: gribi_aft.Afts.NextHop.mac_address:type_name -> ywrapper.StringValue
	35, // 36: gribi_aft.Afts.NextHop.network_instance:type_name -> ywrapper.StringValue
	37, // 37: gribi_aft.Afts.NextHop.pop_top_label:type_name -> ywrapper.BoolValue
	22, // 38: gribi_aft.Afts.NextHop.pushed_mpls_label_stack:type_name -> gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion
	35, // 39: gribi_aft.Afts.NextHop.tunnel_src_ip_address:type_name -> ywrapper.StringValue
	34, // 40: gribi_aft.Afts.NextHop.vni_label:type_name -> ywrapper.UintValue
	34, // 41: gribi_aft.Afts.NextHopGroup.backup_next_hop_group:type_name -> ywrapper.UintValue
	34, // 42: gribi_aft.Afts.NextHopGroup.color:type_name -> ywrapper.UintValue
	31, // 43: gribi_aft.Afts.NextHopGroup.next_hop:type_name -> gribi_aft.Afts.NextHopGroup.NextHopKey
	11, // 44: gribi_aft.Afts.NextHopGroupKey.next_hop_group:type_name -> gribi_aft.Afts.NextHopGroup
	10, // 45: gribi_aft.Afts.NextHopKey.next_hop:type_name -> gribi_aft.Afts.NextHop
	33, // 46: gribi_aft.Afts.PolicyForwardingEntry.entry_metadata:type_name -> ywrapper.BytesValue
	34, // 47: gribi_aft.Afts.PolicyForwardingEntry.ip_dscp:type_name -> ywrapper.UintValue
	35, // 48: gribi_aft.Afts.PolicyForwardingEntry.ip_prefix:type_name -> ywrapper.StringValue
	38, // 49: gribi_aft.Afts.PolicyForwardingEntry.ip_protocol_openconfigpacketmatchtypesipprotocol:type_name -> gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL
	34, // 50: gribi_aft.Afts.PolicyForwardingEntry.l4_dst_port:type_name -> ywrapper.UintValue
	34, // 51: gribi_aft.Afts.PolicyForwardingEntry.l4_src_port:type_name -> ywrapper.UintValue
	35, // 52: gribi_aft.Afts.PolicyForwardingEntry.mac_address:type_name -> ywrapper.StringValue
	36, // 53: gribi_aft.Afts.PolicyForwardingEntry.mpls_label_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	34, // 54: gribi_aft.Afts.PolicyForwardingEntry.mpls_tc:type_name -> ywrapper.UintValue
	34, // 55: gribi_aft.Afts.PolicyForwardingEntry.next_hop_group:type_name -> ywrapper.UintValue
	35, // 56: gribi_aft.Afts.PolicyForwardingEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	14, // 57: gribi_aft.Afts.PolicyForwardingEntryKey.policy_forwarding_entry:type_name -> gribi_aft.Afts.PolicyForwardingEntry
	36, // 58: gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion.popped_mpls_label_stack_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	23, // 59: gribi_aft.Afts.NextHop.EncapHeader.gre:type_name -> gribi_aft.Afts.NextHop.EncapHeader.Gre
	24, // 60: gribi_aft.Afts.NextHop.EncapHeader.ipv4:type_name -> gribi_aft.Afts.NextHop.EncapHeader.Ipv4
	25, // 61: gribi_aft.Afts.NextHop.EncapHeader.ipv6:type_name -> gribi_aft.Afts.NextHop.EncapHeader.Ipv6
	26, // 62: gribi_aft.Afts.NextHop.EncapHeader.mpls:type_name -> gribi_aft.Afts.NextHop.EncapHeader.Mpls
	32, // 63: gribi_aft.Afts.NextHop.EncapHeader.type:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	27, // 64: gribi_aft.Afts.NextHop.EncapHeader.udp_v4:type_name -> gribi_aft.Afts.NextHop.EncapHeader.UdpV4
	28, // 65: gribi_aft.Afts.NextHop.EncapHeader.udp_v6:type_name -> gribi_aft.Afts.NextHop.EncapHeader.UdpV6
	17, // 66: gribi_aft.Afts.NextHop.EncapHeaderKey.encap_header:type_name -> gribi_aft.Afts.NextHop.EncapHeader
	35, // 67: gribi_aft.Afts.NextHop.Gre.dst_ip:type_name -> ywrapper.StringValue
	35, // 68: gribi_aft.Afts.NextHop.Gre.src_ip:type_name -> ywrapper.StringValue
	34, // 69: gribi_aft.Afts.NextHop.Gre.ttl:type_name -> ywrapper.UintValue
	35, // 70: gribi_aft.Afts.NextHop.InterfaceRef.interface:type_name -> ywrapper.StringValue
	34, // 71: gribi_aft.Afts.NextHop.InterfaceRef.subinterface:type_name -> ywrapper.UintValue
	35, // 72: gribi_aft.Afts.NextHop.IpInIp.dst_ip:type_name -> ywrapper.StringValue
	35, // 73: gribi_aft.Afts.NextHop.IpInIp.src_ip:type_name -> ywrapper.StringValue
	36, // 74: gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion.pushed_mpls_label_stack_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	35, // 75: gribi_aft.Afts.NextHop.EncapHeader.Gre.dst_ip:type_name -> ywrapper.StringValue
	35, // 76: gribi_aft.Afts.NextHop.EncapHeader.Gre.src_ip:type_name -> ywrapper.StringValue
	34, // 77: gribi_aft.Afts.NextHop.EncapHeader.Gre.ttl:type_name -> ywrapper.UintValue
	35, // 78: gribi_aft.Afts.NextHop.EncapHeader.Ipv4.dst_ip:type_name -> ywrapper.StringValue
	35, // 79: gribi_aft.Afts.NextHop.EncapHeader.Ipv4.src_ip:type_name -> ywrapper.StringValue
	35, // 80: gribi_aft.Afts.NextHop.EncapHeader.Ipv6.dst_ip:type_name -> ywrapper.StringValue
	35, // 81: gribi_aft.Afts.NextHop.EncapHeader.Ipv6.src_ip:type_name -> ywrapper.StringValue
	29, // 82: gribi_aft.Afts.NextHop.EncapHeader.Mpls.mpls_label_stack:type_name -> gribi_aft.Afts.NextHop.EncapHeader.Mpls.MplsLabelStackUnion
	34, // 83: gribi_aft.Afts.NextHop.EncapHeader.Mpls.traffic_class:type_name -> ywrapper.UintValue
	34, // 84: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.dscp:type_name -> ywrapper.UintValue
	35, // 85: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.dst_ip:type_name -> ywrapper.StringValue
	34, // 86: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.dst_udp_port:type_name -> ywrapper.UintValue
	34, // 87: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.ip_ttl:type_name -> ywrapper.UintValue
	35, // 88: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.src_ip:type_name -> ywrapper.StringValue
	34, // 89: gribi_aft.Afts.NextHop.EncapHeader.UdpV4.src_udp_port:type_name -> ywrapper.UintValue
	34, // 90: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.dscp:type_name -> ywrapper.UintValue
	35, // 91: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.dst_ip:type_name -> ywrapper.StringValue
	34, // 92: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.dst_udp_port:type_name -> ywrapper.UintValue
	34, // 93: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.ip_ttl:type_name -> ywrapper.UintValue
	35, // 94: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.src_ip:type_name -> ywrapper.StringValue
	34, // 95: gribi_aft.Afts.NextHop.EncapHeader.UdpV6.src_udp_port:type_name -> ywrapper.UintValue
	36, // 96: gribi_aft.Afts.NextHop.EncapHeader.Mpls.MplsLabelStackUnion.mpls_label_stack_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	34, // 97: gribi_aft.Afts.NextHopGroup.NextHop.weight:type_name -> ywrapper.UintValue
	30, // 98: gribi_aft.Afts.NextHopGroup.NextHopKey.next_hop:type_name -> gribi_aft.Afts.NextHopGroup.NextHop
	99, // [99:99] is the sub-list for method output_type
	99, // [99:99] is the sub-list for method input_type
	99, // [99:99] is the sub-list for extension type_name
	99, // [99:99] is the sub-list for extension extendee
	0,  // [0:99] is the sub-list for field type_name
}

func init() { file_v1_proto_gribi_aft_gribi_aft_proto_init() }
func file_v1_proto_gribi_aft_gribi_aft_proto_init() {
	if File_v1_proto_gribi_aft_gribi_aft_proto != nil {
		return
	}
	file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7].OneofWrappers = []any{
		(*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum)(nil),
		(*Afts_LabelEntryKey_LabelUint64)(nil),
	}
	file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14].OneofWrappers = []any{
		(*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Afts_PolicyForwardingEntry_IpProtocolUint64)(nil),
		(*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum)(nil),
		(*Afts_PolicyForwardingEntry_MplsLabelUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_proto_gribi_aft_gribi_aft_proto_goTypes,
		DependencyIndexes: file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs,
		MessageInfos:      file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes,
	}.Build()
	File_v1_proto_gribi_aft_gribi_aft_proto = out.File
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc = nil
	file_v1_proto_gribi_aft_gribi_aft_proto_goTypes = nil
	file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs = nil
}
